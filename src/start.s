#define ASM_FILE 1

.set STACK_SIZE, 0x4000

.set AOUT_KLUDGE, 0

.set MAGIC, 0xe85250d6
.set ARCH, 0
.set TAG_ADDRESS, 2
.set TAG_OPTIONAL, 1
.set TAG_ENTRY_ADDRESS, 3
.set TAG_FRAMEBUFFER, 5
.set TAG_END, 0

.text
.globl start, _start, gdt_flush, idt_load, isr_wrapper

start:
_start:
	jmp multiboot_entry

	.align 8

multiboot_header:
    .long MAGIC
    .long ARCH
    .long multiboot_header_end - multiboot_header
	.long -(MAGIC + ARCH + (multiboot_header_end - multiboot_header))

//.ifndef __ELF__
//address_tag_start:
//        .short TAG_ADDRESS
//        .short TAG_OPTIONAL
//        .long address_tag_end - address_tag_start
        /*  header_addr */
//        .long   multiboot_header
        /*  load_addr */
//        .long   start
        /*  load_end_addr */
//        .long   _edata
        /*  bss_end_addr */
//        .long   _end
//address_tag_end:
//entry_address_tag_start:
//        .short TAG_ENTRY_ADDRESS
//        .short TAG_OPTIONAL
//        .long entry_address_tag_end - entry_address_tag_start
        /*  entry_addr */
//        .long multiboot_entry
//entry_address_tag_end:
//.endif /*  __ELF__ */
framebuffer_tag_start:
        .short TAG_FRAMEBUFFER
        .short TAG_OPTIONAL
        .long framebuffer_tag_end - framebuffer_tag_start
        .long 1024
        .long 768
        .long 32
framebuffer_tag_end:
        .short TAG_END
        //.short 0
        .long 8
multiboot_header_end:
.extern gp            // Says that 'gp' is in another file
gdt_flush:
    lgdt (gp)        // Load the GDT with our 'gp' which is a special pointer
    mov $0x10, %ax    // 0x10 is the offset in the GDT to our data segment
    mov %ds, %ax
    mov %es, %ax
    mov %fs, %ax
    mov %gs, %ax
    mov %ss, %ax
    jmp (flush2)+0x08 // 0x08 is the offset to our code segment: Far jump!
flush2:
    ret               // Returns back to the C code!
.extern idtp
idt_load:
    lidt (idtp)
    ret


/* The first 32 entries in the IDT correspond to Exceptions that can possibly be generated by the processor,
 and therefore need to be handled. Some exceptions will push another value onto the stack:
 an Error Code value which is specific to the exception caused. */

// Exception #	Description							Error Code?
// 		0		Division By Zero Exception				No
// 		1		Debug Exception							No
// 		2		Non Maskable Interrupt Exception		No
// 		3		Breakpoint Exception					No
// 		4		Into Detected Overflow Exception		No
// 		5		Out of Bounds Exception					No
// 		6		Invalid Opcode Exception				No
// 		7		No Coprocessor Exception				No
// 		8		Double Fault Exception					Yes
// 		9		Coprocessor Segment Overrun Exception	No
// 		10		Bad TSS Exception						Yes
// 		11		Segment Not Present Exception			Yes
// 		12		Stack Fault Exception					Yes
// 		13		General Protection Fault Exception		Yes
// 		14		Page Fault Exception					Yes
// 		15		Unknown Interrupt Exception				No
// 		16		Coprocessor Fault Exception				No
// 		17		Alignment Check Exception (486+)		No
// 		18		Machine Check Exception (Pentium/586+)	No
// 	 19 to 31	Reserved Exceptions	No

.globl isr0, isr1, isr2, isr3, isr4, isr5, isr6, isr7, isr8, isr9, isr10, isr11, isr12, isr13, isr14, isr15, isr16, isr17, isr18, isr19, isr20, isr21, isr22, isr23, isr24, isr25, isr26, isr27, isr28, isr29, isr30, isr31

isr0:
    cli
    push $0
    push $0
    jmp isr_common_stub

isr1:
    cli
    push $0
    push $1
    jmp isr_common_stub

isr2:
    cli
    push $0
    push $2
    jmp isr_common_stub

isr3:
    cli
    push $0
    push $3
    jmp isr_common_stub

isr4:
    cli
    push $0
    push $4
    jmp isr_common_stub

isr5:
    cli
    push $0
    push $5
    jmp isr_common_stub

isr6:
    cli
    push $0
    push $6
    jmp isr_common_stub

isr7:
    cli
    push $0
    push $7
    jmp isr_common_stub

isr8:
    cli
    push $8
    jmp isr_common_stub

isr9:
	cli
	push $0
	push $9
	jmp isr_common_stub

isr10:
	cli
	push $10
	jmp isr_common_stub

isr11:
	cli
	push $11
	jmp isr_common_stub

isr12:
	cli
	push $12
	jmp isr_common_stub

isr13:
	cli
	push $13
	jmp isr_common_stub

isr14:
	cli
	push $14
	jmp isr_common_stub

isr15:
	cli
	push $0
	push $15
	jmp isr_common_stub

isr16:
	cli
	push $0
	push $16
	jmp isr_common_stub

isr17:
	cli
	push $0
	push $17
	jmp isr_common_stub

isr18:
	cli
	push $0
	push $18
	jmp isr_common_stub

isr19:
	cli
	push $0
	push $19
	jmp isr_common_stub

isr20:
	cli
	push $0
	push $20
	jmp isr_common_stub

isr21:
	cli
	push $0
	push $21
	jmp isr_common_stub

isr22:
	cli
	push $0
	push $22
	jmp isr_common_stub

isr23:
	cli
	push $0
	push $23
	jmp isr_common_stub

isr24:
	cli
	push $0
	push $24
	jmp isr_common_stub

isr25:
	cli
	push $0
	push $25
	jmp isr_common_stub

isr26:
	cli
	push $0
	push $26
	jmp isr_common_stub

isr27:
	cli
	push $0
	push $27
	jmp isr_common_stub

isr28:
	cli
	push $0
	push $28
	jmp isr_common_stub

isr29:
	cli
	push $0
	push $29
	jmp isr_common_stub

isr30:
	cli
	push $0
	push $30
	jmp isr_common_stub

isr31:
	cli
	push $0
	push $31
	jmp isr_common_stub

.extern fault_handler

// This is our common ISR stub. It saves the processor state, sets
// up for kernel mode segments, calls the C-level fault handler,
// and finally restores the stack frame.
isr_common_stub:
    pusha
    push %ds
    push %es
    push %fs
    push %gs
    mov $0x10, %ax   // Load the Kernel Data Segment descriptor!
    mov %ax, %ds
    mov %ax, %es
    mov %ax, %fs
    mov %ax, %gs
    mov %esp, %eax   // Push us the stack
    push %eax
    mov fault_handler, %eax
    call %eax       // A special call, preserves the 'eip' register
    pop %eax
    pop %gs
    pop %fs
    pop %es
    pop %ds
    popa
    add %esp, 8     // Cleans up the pushed error code and pushed ISR number
    iret           // pops 5 things at once: CS, EIP, EFLAGS, SS, and ESP!

.globl irq0, irq1, irq2, irq3, irq4, irq5, irq6, irq7, irq8, irq9, irq10, irq11, irq12, irq13, irq14, irq15

// 32: IRQ0
irq0:
    cli
    push $0
    push $32
    jmp irq_common_stub

// 33: IRQ1
irq1:
    cli
    push $0
    push $33
    jmp irq_common_stub

// 34: IRQ2
irq2:
    cli
    push $0
    push $34
    jmp irq_common_stub

// 35: IRQ3
irq3:
    cli
    push $0
    push $35
    jmp irq_common_stub

// 36: IRQ4
irq4:
    cli
    push $0
    push $36
    jmp irq_common_stub

// 37: IRQ5
irq5:
    cli
    push $0
    push $37
    jmp irq_common_stub

// 38: IRQ6
irq6:
    cli
    push $0
    push $38
    jmp irq_common_stub

// 39: IRQ7
irq7:
    cli
    push $0
    push $39
    jmp irq_common_stub

// 40: IRQ8
irq8:
    cli
    push $0
    push $40
    jmp irq_common_stub

// 41: IRQ9
irq9:
    cli
    push $0
    push $41
    jmp irq_common_stub

// 42: IRQ10
irq10:
    cli
    push $0
    push $42
    jmp irq_common_stub

// 43: IRQ11
irq11:
    cli
    push $0
    push $43
    jmp irq_common_stub

// 44: IRQ12
irq12:
    cli
    push $0
    push $44
    jmp irq_common_stub

// 45: IRQ13
irq13:
    cli
    push $0
    push $45
    jmp irq_common_stub

// 46: IRQ14
irq14:
    cli
    push $0
    push $46
    jmp irq_common_stub

// 47: IRQ15
irq15:
    cli
    push $0
    push $47
    jmp irq_common_stub

.extern irq_handler

irq_common_stub:
    pusha
    push %ds
    push %es
    push %fs
    push %gs
    mov $0x10, %ax
    mov %ax, %ds
    mov %ax, %es
    mov %ax, %fs
    mov %ax, %ds
    mov %esp, %eax
    push %eax
    mov irq_handler, %eax
    call %eax
    pop %eax
    pop %gs
    pop %fs
    pop %es
    pop %ds
    popa
    add %esp, 8
    iret

multiboot_entry:
	movl $(stack + STACK_SIZE), %esp

	pushl $0
	popf

	pushl %ebx

	pushl %eax

	call kernel_main

l:	hlt
	jmp l

	.comm stack, STACK_SIZE
_edata:

.bss
_end:
